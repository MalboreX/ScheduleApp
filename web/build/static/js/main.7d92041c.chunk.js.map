{"version":3,"sources":["components/Header.jsx","components/Timetable.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Timetable","props","className","partyName","Main","state","error","items","isLoaded","fetch","then","res","json","result","setState","this","console","log","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iLAUeA,MARf,WACI,OACI,gCACI,uE,4BCgBGC,MAnBf,SAAmBC,GACf,OACI,yBAAKC,UAAY,8BACb,yBAAKA,UAAU,aACX,4BAAKD,EAAME,WACX,yBAAKD,UAAU,kCACf,yBAAKA,UAAU,WAAf,KAGA,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,gBAAb,wHACA,uBAAGA,UAAU,aAAb,kBCyCHE,E,kDAjDX,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTC,MAAO,KACPC,MAAO,GACPC,UAAU,GALC,E,gEASE,IAAD,OAChBC,MAAM,yCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVN,UAAU,EACVD,MAAOM,EAAON,WAGtB,SAACD,GACG,EAAKQ,SAAS,CACVN,UAAU,EACVF,e,+BAMN,IAAD,EAC6BS,KAAKV,MAAxBG,GADV,EACGF,MADH,EACUE,UAAUD,EADpB,EACoBA,MAMzB,OAJIC,GACAQ,QAAQC,IAAIV,GAIZ,8BACI,yBAAKL,UAAY,0BACb,kBAAC,EAAD,CAAWC,UAAY,cACvB,kBAAC,EAAD,CAAWA,UAAY,cACvB,kBAAC,EAAD,CAAWA,UAAY,cACvB,kBAAC,EAAD,CAAWA,UAAY,cACvB,kBAAC,EAAD,CAAWA,UAAY,oB,GA3CxBe,IAAMC,WCYVC,MAXf,WACE,OACE,6BACE,yBAAKlB,UAAY,mBACf,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLU,QAAQV,MAAMA,EAAM+B,a","file":"static/js/main.7d92041c.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <header>\n            <h1>Schedule time for 01.01.2021 (1 Week)</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction Timetable(props) {\n    return (\n        <div className = \"col-lg-3 col-md-4 col-sm-6\">\n            <div className=\"timetable\">\n                <h6>{props.partyName}</h6>\n                <div className=\"d-flex flex-row schedule-block\">\n                <div className=\"num-col\">\n                  0\n                </div>\n                <div className=\"subject-grey\">\n                  <p className=\"subject-name\">Сис. программирование</p>\n                  <p className=\"room-name\">А204</p>\n                </div>\n              </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Timetable","import React from 'react';\n\nimport Timetable from './Timetable'\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            items: [],\n            isLoaded: false\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:5000/api/v1/schedule')\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    items: result.items\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: false,\n                    error\n                });\n            }\n        )\n    }\n\n    render() {\n        const { error, isLoaded, items} = this.state;\n        \n        if (isLoaded) {\n            console.log(items);\n        }\n\n        return (\n            <main>\n                <div className = \"row schedule-container\">\n                    <Timetable partyName = \"П-17\"/>\n                    <Timetable partyName = \"П-18\"/>\n                    <Timetable partyName = \"П-19\"/>\n                    <Timetable partyName = \"П-20\"/>\n                    <Timetable partyName = \"П-21\"/>\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default Main","import React from 'react';\n\nimport Header from './components/Header'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div>\n      <div className = \"container-fluid\">\n        <Header/>\n        <Main/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}